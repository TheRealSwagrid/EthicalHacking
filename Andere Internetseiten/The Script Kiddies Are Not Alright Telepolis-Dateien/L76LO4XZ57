var configuration = {
    domain: "heise.de",
    stream_prefix: "https://content.upscore.com/6265b813a21b26d3dce87f3c3faa8b7b/",
    streams: {
        //pinned: "pinned-2TSNAFX2CU",
        plus_main: "66",
        plus_article: "77",
        free_article: "78",
    },
    boxes: [
        {
            container: "[data-uprec-id='main']",
            rule: { user_status: [1, 2] },
            streams: ["plus_main"],
            pinned: 0,
            premium: 3,
            total: 3,
            box_marker: "main",
            template: { free: "free", premium: "premium", wrapper: "wrapper_main" },
            query_params: "?upscorebox=o&wt_mc=intern.red.plus.topteaser.startseite.teaser_up.teaser_up&utm_source=upscore&utm_campaign=main",
        },
        {
            container: "[data-uprec-id='article-page-premium']",
            rule: { user_status: [1, 2] },
            streams: ["plus_article"],
            pinned: 0,
            premium: 8,
            total: 8,
            box_marker: "article-premium",
            template: { free: "free", premium: "premium", wrapper: "w_premium" },
            query_params: "?upscorebox=o&wt_mc=intern.red.plus.plus_upscorebox.beitrag_plus.teaser_up.teaser_up&utm_source=upscore&utm_campaign=article_page_premium",
        },
        {
            container: "[data-uprec-id='article-page-free']",
            rule: { },
            streams: ["plus_article", "free_article"],
            pinned: 0,
            premium: 3,
            total: 8,
            box_marker: "article-free",
            template: { free: "free", premium: "premium", wrapper: "wrapper_article" },
            query_params: "?upscorebox=o&wt_mc=intern.red.ho.ho_top_upscorebox.beitrag.teaser_up.teaser_up&utm_source=upscore&utm_campaign=article_page_free",
        },
    ],
    templates: {
        free: "#upscore-reco-template-free",
        premium: "#upscore-reco-template-premium",
        wrapper_main: "#upscore-reco-template-wrapper-homepage",
        wrapper_article:"#upscore-reco-template-wrapper-article",
        w_premium: "#upscore-reco-template-wrapper-article-premium"
    },
    modify_article: function(article) {
        if(article.content_type == 1){
            article.title = article.title.replace("Heise+ |", "");
        }
        var introMatch = article.url.match(/\.de\/(\w+)\//); //intro - from url
        if(introMatch){
            article.intro = introMatch[1].charAt(0).toUpperCase() + introMatch[1].slice(1);
        }
    }
};

/*global  _uprec, Promise */
(function (window, document, navigator, config) {
    let debug = localStorage.getItem("upscore-reco"); // localStorage.setItem("upscore-reco",1)
    let main_data = { object_id: null, user_status: 0 };
    let stats_url = "https://cr_stats.upscore.com/";
    let positionSelector = "[data-upscore-object-id]";
    function log(msg, ...args){
        args.unshift("UpScore-recommendation: " + msg);
        debug && console.log.apply(null, args);
    }
    function getRandomIndex(articleList, total) {
        let length = articleList.length;
        let ct = 0;
        let rand = Math.floor(Math.random() * total);
        for (let i = 0; i < articleList.length; i++) {
            const ca = articleList[i];
            ct += ca.w;
            if(ct > rand){ return i; }
        }
        return length - 1;
    }

    function processStream(streamItems, seenIds, query_params){
        var result = [];
        for (var index = 0; index < streamItems.length; index++) {
            var element = streamItems[index];
            if(seenIds.some(id => id == element.object_id )){
               continue;
            }
            element.url += query_params;
            if(config.modify_article != null){
                config.modify_article(element);
            }
            result.push(element);
        }
        return result;
    }

    let qSelector = (q) => document.querySelector(q);

    if (!window.fetch) {return;}

    var sendData = (() => {
        // return (url, data) => {fetch(url, { method: "POST", body: data }); }; // TODO: for debugging

        if(typeof navigator.sendBeacon !== "undefined"){
            return (url, data) => {
                navigator.sendBeacon(url, data);
            };
        }else{
            return (url, data) => {
                fetch(url, { method: "POST", body: data });
            };
        }
    })();

    function sendError(ex, message, data){
        var request_data = {
            url: document.location.href,
            user_agent:  navigator.userAgent,
            domain: config.domain,
            message: message,
            tag: "recommendation",
            exception: ex ? { message: ex.message, stack: ex.stack, name: ex.name } : null,
            data : data ? JSON.stringify(data) : ""
        };
        sendData("//hit-error.upscore.com", JSON.stringify(request_data));
    }

    const attributesToModify = ["title", "intro", "teaser", "object_id", "section", "url", "image", "kicker", "lead"];
    function itemTemplate(item, free_template, premium_template){
        var resultHtml = item.content_type == 1 ? premium_template.slice() : free_template.slice();
        for (var index = 0; index < attributesToModify.length; index++) {
            var attribute = attributesToModify[index];
            var find = "\\$\\{"+attribute+"\\}";
            var re = new RegExp(find, "g");
            resultHtml = resultHtml.replace(re, item[attribute]);
        }
        return resultHtml;
    }

    function shuffleArray(a) {
        var j, x, i;
        for (i = a.length - 1; i > 0; i--) {
            j = Math.floor(Math.random() * (i + 1));
            x = a[i];
            a[i] = a[j];
            a[j] = x;
        }
        return a;
    }

    function selectRandomArticles(articleList, articlesToAdd){
        var totalStreamArticles = articleList.length;
        var totalArticleScore = 0;
        for (let j = 0; j < totalStreamArticles; j++) {
            let se = articleList[j];
            let currentWeight = totalStreamArticles - j;
            se.w = currentWeight;
            totalArticleScore += currentWeight;
        }
        var finalList = [];
        for (var k = 0; k < articlesToAdd && articleList.length; k++) {
            var removedItem = articleList.splice(getRandomIndex(articleList, totalArticleScore), 1)[0];
            totalArticleScore -= removedItem.w;
            finalList.push(removedItem);
        }
        return finalList;
    }

    var handleBoxCreation = (allStreams, box_configs) => {
        try{
            var seenIds = [];
            try{
                var itemsText = localStorage.getItem("u_said");
                if(itemsText){
                    seenIds = itemsText.split(";");
                }
            }catch(e){}
            seenIds.push(main_data.object_id);

            // check existing articles on page
            try {
                var existingPositions = document.querySelectorAll(positionSelector);
                for (let i = 0; i < existingPositions.length; i++) {
                    var element = existingPositions[i];
                    seenIds.push(element.dataset.upscoreObjectId);
                }
            } catch (e) {
                console.error(e);
            }

            for (let index = 0; index < box_configs.length; index++) { // TODO: try-catch, extract as function
                let boxConfig = box_configs[index];
                log("Processing config:", boxConfig);
                var getTemplate = (type)=> {
                    var templateSelector = config.templates[type];
                    var templateElement = qSelector(templateSelector);
                    return templateElement.content.firstElementChild.outerHTML;
                };
                var free_template = getTemplate(boxConfig.template.free);
                var premium_template = boxConfig.template.premium && getTemplate(boxConfig.template.premium);
                var itemsToAdd = boxConfig.total;
                var premiumToAdd = boxConfig.premium;
                var articlesToDisplay = [];
                for (let streamIndex = 0; streamIndex < boxConfig.streams.length; streamIndex++) {
                    let streamName = boxConfig.streams[streamIndex];
                    var stream = allStreams.find(s => s.name == streamName);
                    var streamArticles = processStream(stream.data, seenIds, boxConfig.query_params);
                    if(streamName == "pinned" && boxConfig.pinned > 0){
                        var selectedPinnedArticles = selectRandomArticles(streamArticles, boxConfig.pinned);
                        log("selected pinned", selectedPinnedArticles);
                        itemsToAdd -= selectedPinnedArticles.length;
                        articlesToDisplay = articlesToDisplay.concat(selectedPinnedArticles);
                        seenIds = seenIds.concat(selectedPinnedArticles.map(a => a.object_id));
                    }else{
                        var premiumArticles = streamArticles.filter(a => (a.content_type == 1));
                        if(itemsToAdd > 0 && premiumArticles.length != 0 && premiumToAdd != 0){
                            var selectedPremiumArticles = selectRandomArticles(premiumArticles, premiumToAdd);
                            log("selected premium", selectedPremiumArticles);
                            itemsToAdd -= selectedPremiumArticles.length;
                            premiumToAdd -= selectedPremiumArticles.length;
                            articlesToDisplay = articlesToDisplay.concat(selectedPremiumArticles);
                            seenIds = seenIds.concat(selectedPremiumArticles.map(a => a.object_id));
                        }
                        if(itemsToAdd > 0){
                            var freeArticles = streamArticles.filter(a => (a.content_type == 0));
                            var selectedFreeArticles = selectRandomArticles(freeArticles, itemsToAdd);
                            itemsToAdd -= selectedFreeArticles.length;
                            log("selected free", selectedFreeArticles);
                            articlesToDisplay = articlesToDisplay.concat(selectedFreeArticles);
                            seenIds = seenIds.concat(selectedFreeArticles.map(a => a.object_id));
                        }
                    }
                }
                articlesToDisplay = shuffleArray(articlesToDisplay);
                let itemsHtml = articlesToDisplay.reduce((acc, currentItem) => (acc + itemTemplate(currentItem, free_template, premium_template)), "");
                if(itemsToAdd > 0){
                    sendError(null, "not enough articles"); // add data?
                }
                var boxHtml = "";
                if(boxConfig.template.wrapper){
                    var wrapperTemplateSelector = config.templates[boxConfig.template.wrapper];
                    var wrapperTemplateElement = qSelector(wrapperTemplateSelector);
                    var WrapperTemplate =  wrapperTemplateElement.content.firstElementChild.outerHTML;
                    boxHtml = WrapperTemplate.replace("${content}", itemsHtml);
                }else{
                    boxHtml = itemsHtml;
                }
                var articleContainer = qSelector(boxConfig.container);
                articleContainer.innerHTML = boxHtml;
                setTimeout(attachHandlers.bind(this, articleContainer, boxConfig.box_marker), 100);
            }
        }catch(e){
            console.error(e);
            sendError(e, "box creation failed");
        }
    };

    var handleError = (error) => {
        console.error(error);
        sendError(error, "fetch failed");
    };

    // config -> streams to load
    var setupBox = (attempts) => {
        try{
            if(_uprec.q == null || _uprec.q.length == 0 || document.readyState == "loading"){
                if(attempts < 5){
                    // log("loading...", attempts, document.readyState);
                    attempts++;
                    window.setTimeout(setupBox.bind(this, attempts), 500 * attempts);
                }else{
                    sendError(null, "setupBox not initialized");
                }
                return;
            }
            let queueElement = _uprec.q.pop();
            Object.assign(main_data, queueElement.data);
            if(debug){ main_data.user_status = 1; }
            let configToLoad = [];
            let streams = [];
            for (let index = 0; index < config.boxes.length; index++) {
                let boxConfig = config.boxes[index];
                if(!qSelector(boxConfig.container)) { continue; }
                if(boxConfig.rule.user_status != null && boxConfig.rule.user_status.length != 0 && !boxConfig.rule.user_status.includes(main_data.user_status)){ continue; }
                streams = streams.concat(boxConfig.streams);
                configToLoad.push(boxConfig);
            }
            configToLoad = configToLoad.filter((value, index, arr) => arr.indexOf(value) === index); // deduplicate values
            if(configToLoad.length == 0){
                // sendError(null, "not configToLoad");
                return;
            }
            let streamPromises = [];
            for (let name of streams) {
                var streamPromise = fetch(config.stream_prefix + config.streams[name])
                .then((r) =>  r.json())
                .then((data) => ({ name: name, data: data }));
                streamPromises.push(streamPromise);
            }
            Promise.all(streamPromises).then((data) => handleBoxCreation(data, configToLoad)).catch(handleError);
        }catch(e){
            sendError(e, "setupBox failed");
        }
    };
    setupBox(0);

    /// CLiCK/VIEWS METRICS ///
    function debounce(func, wait) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(function() {
                timeout = null;
                func.apply(context, args);
            }, wait);
        };
    }

    function attachHandlers(container, marker) {
        var statsFirstLine =  config.domain + "&" + marker + "\n";
        function element_clicked(id) {
            log("Clicked: ", id);
            sendData(stats_url + "c", statsFirstLine + id );
        }

        function sendImpression(){
            sendData(stats_url + "i", statsFirstLine);
        }
        var seenIds = [];
        var boxSeen = false;
        function positionSeen(id){
            seenIds.push(id);
            sendViewsThrottled();
        }

        function sendViews(){
            var body = statsFirstLine + seenIds.join("\n");
            if(!boxSeen){
                body += "\n<box>";
                boxSeen = true;
            }
            log("Views: \n", body);
            sendData(stats_url + "v", body);
            seenIds = [];
        }

        var sendViewsThrottled = debounce(sendViews, 500);
        var inViewTimeouts = {};

        var positions_observer = new IntersectionObserver(on_element_visible, { threshold: [0.5, 0.7] });
        function checkStillInView(id, position){
            if(inViewTimeouts[id]){
                //console.log("Seen: ", id);
                positions_observer.unobserve(position);
                positionSeen(id);
            }
        }

        function on_element_visible(entries) {
            entries.forEach(function(entry){
                var position = entry.target;
                var id = position.dataset.upscoreObjectId;
                if (entry.intersectionRatio < 0.7){
                    window.clearTimeout(inViewTimeouts[id]);
                }else {
                    inViewTimeouts[id] = window.setTimeout(checkStillInView.bind(null, id, position), 400);
                }
            });
        }

        var trackedNodes = Array.prototype.slice.call(container.querySelectorAll(positionSelector), 0);
        log("Tracked positions: ", trackedNodes);
        trackedNodes.forEach(function(element){
            positions_observer.observe(element);
            var id = element.dataset.upscoreObjectId;
            var boundHandler = element_clicked.bind(null,id);
            element.addEventListener("click", boundHandler);
            element.addEventListener("auxclick", boundHandler);
        });
        if(trackedNodes.length > 0){
            sendImpression();
        }
    }
})(window, document, navigator, configuration);